import 'package:flutter/material.dart';
import '../../common/widgets/glass_card.dart';
import '../../common/widgets/custom_nav_bar.dart';

class AISelectionScreen extends StatefulWidget {
  const AISelectionScreen({Key? key}) : super(key: key);

  @override
  State<AISelectionScreen> createState() => _AISelectionScreenState();
}

class _AISelectionScreenState extends State<AISelectionScreen> {
  //int _currentNavIndex = 2; // AI ÏÉÅÎã¥ ÌôîÎ©¥Ïù¥ Í∏∞Î≥∏ ÏÑ†ÌÉùÎê®

  // AI ÌéòÎ•¥ÏÜåÎÇò Î™©Î°ù
  final List<Map<String, dynamic>> aiPersonas = [
    {
      'id': 'empathetic',
      'name': 'ÏÑúÏßÑÏïÑ',
      'avatar': 'üë©',
      'gradient': [const Color(0xFFFF6AC2), const Color(0xFFA637AB)],
      'persona': 'Í≥µÍ∞êÌòï',
      'description': 'Îî∞ÎúªÌïú Í≥µÍ∞êÏúºÎ°ú Ïù¥ÏïºÍ∏∞Î•º Îì§Ïñ¥Ï£ºÎäî ÏπúÍµ¨',
      'style': 'Í∞êÏ†ïÏùÑ Î®ºÏ†Ä Ïù¥Ìï¥ÌïòÍ≥† Í≥µÍ∞êÌïòÎäî ÎåÄÌôî Ïä§ÌÉÄÏùº',
    },
    {
      'id': 'analytical',
      'name': 'Ïù¥ÏÑ±ÎØº',
      'avatar': 'üß†',
      'gradient': [const Color(0xFF4A8CFF), const Color(0xFF2D6FE0)],
      'persona': 'Î∂ÑÏÑùÌòï',
      'description': 'Í∞ùÍ¥ÄÏ†ÅÏù∏ ÏãúÍ∞ÅÏúºÎ°ú Ï°∞Ïñ∏Ìï¥Ï£ºÎäî Ï°∞Ïñ∏Ïûê',
      'style': 'ÎÖºÎ¶¨Ï†ÅÏù¥Í≥† Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò ÏÜîÎ£®ÏÖò Ï†úÍ≥µ',
    },
    {
      'id': 'practical',
      'name': 'Ï†ïÌòÑÍ∏∞',
      'avatar': '‚ö°',
      'gradient': [const Color(0xFF39D98A), const Color(0xFF27AA64)],
      'persona': 'Ïã§Ïö©Ìòï',
      'description': 'Ïã§Ï†ú Ï†ÅÏö© Í∞ÄÎä•Ìïú Ìï¥Í≤∞Ï±ÖÏùÑ ÏïåÎ†§Ï£ºÎäî Î©òÌÜ†',
      'style': 'Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ï≤ú Í∞ÄÎä•Ìïú Ï°∞Ïñ∏ ÏúÑÏ£ºÏùò ÎåÄÌôî',
    },
    {
      'id': 'humorous',
      'name': 'ÍπÄÌï¥Ìîº',
      'avatar': 'üòä',
      'gradient': [const Color(0xFFFFB340), const Color(0xFFFF9800)],
      'persona': 'Ïú†Î®∏Ìòï',
      'description': 'Ïú†ÏæåÌïú ÎåÄÌôîÎ°ú Í∏çÏ†ï ÏóêÎÑàÏßÄÎ•º Ï£ºÎäî Î≤ÑÎîî',
      'style': 'Í∞ÄÎ≥çÍ≥† ÏπúÍ∑ºÌïú ÎåÄÌôîÏôÄ Í∏çÏ†ïÏ†Å Ïû¨Ìï¥ÏÑù',
    },
  ];

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDarkMode = theme.brightness == Brightness.dark;

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: isDarkMode
                ? [
              const Color(0xFF1E0338),
              const Color(0xFF1A1B3B),
              const Color(0xFF24162B),
            ]
                : [
              const Color(0xFFE8F0FD),
              const Color(0xFFF5F7FA),
              const Color(0xFFF9F0F8),
            ],
          ),
        ),
        child: Stack(
          children: [
            // Î∞∞Í≤Ω Ìö®Í≥º
            Positioned(
              top: 100,
              right: -100,
              child: Container(
                width: 250,
                height: 250,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  gradient: RadialGradient(
                    colors: [
                      const Color(0xFF8E67D4).withOpacity(0.3),
                      Colors.transparent,
                    ],
                    stops: const [0.0, 0.7],
                  ),
                ),
              ),
            ),
            Positioned(
              bottom: 100,
              left: -100,
              child: Container(
                width: 250,
                height: 250,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  gradient: RadialGradient(
                    colors: [
                      const Color(0xFF4A8CFF).withOpacity(0.3),
                      Colors.transparent,
                    ],
                    stops: const [0.0, 0.7],
                  ),
                ),
              ),
            ),

            SafeArea(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Ïï±Î∞î
                  Padding(
                    padding: const EdgeInsets.all(20),
                    child: Text(
                      'AI ÏÑ†ÌÉù',
                      style: theme.textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),

                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 20),
                    child: Text(
                      'ÍπÄÏò®ÎèÑÎãò, Ïò§ÎäòÏùÄ Ïñ¥Îñ§ ÎåÄÌôîÍ∞Ä ÌïÑÏöîÌïòÏã†Í∞ÄÏöî?',
                      style: TextStyle(
                        color: isDarkMode ? Colors.grey[300] : Colors.grey[700],
                        fontSize: 16,
                      ),
                    ),
                  ),

                  const SizedBox(height: 20),

                  // AI ÌéòÎ•¥ÏÜåÎÇò Î™©Î°ù
                  Expanded(
                    child: ListView.builder(
                      padding: const EdgeInsets.symmetric(horizontal: 20),
                      itemCount: aiPersonas.length,
                      itemBuilder: (context, index) {
                        final ai = aiPersonas[index];
                        return GlassCard(
                          child: InkWell(
                            onTap: () {
                              // AI ÏÉÅÎã¥ ÎåÄÌôî ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                              Navigator.of(context).push(
                                MaterialPageRoute(
                                  builder: (context) => AIConsultationScreen(
                                    aiPersona: ai,
                                  ),
                                ),
                              );
                            },
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                // AI ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥
                                Row(
                                  children: [
                                    Container(
                                      width: 60,
                                      height: 60,
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        gradient: LinearGradient(
                                          colors: ai['gradient'],
                                        ),
                                      ),
                                      child: Center(
                                        child: Text(
                                          ai['avatar'],
                                          style: const TextStyle(fontSize: 28),
                                        ),
                                      ),
                                    ),
                                    const SizedBox(width: 16),
                                    Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          ai['name'],
                                          style: theme.textTheme.titleMedium?.copyWith(
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                        Text(
                                          ai['persona'],
                                          style: TextStyle(
                                            color: isDarkMode ? Colors.grey[400] : Colors.grey[600],
                                            fontSize: 14,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),

                                const SizedBox(height: 12),

                                // AI ÏÑ§Î™Ö
                                Text(
                                  ai['description'],
                                  style: TextStyle(
                                    color: isDarkMode ? Colors.grey[300] : Colors.grey[700],
                                    fontSize: 15,
                                  ),
                                ),

                                const SizedBox(height: 4),

                                // AI Ïä§ÌÉÄÏùº
                                Text(
                                  ai['style'],
                                  style: TextStyle(
                                    color: isDarkMode ? Colors.grey[500] : Colors.grey[600],
                                    fontSize: 12,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      /*
      bottomNavigationBar: CustomNavBar(
        currentIndex: _currentNavIndex,
        onTap: (index) {
          setState(() {
            _currentNavIndex = index;
          });
          // Ïã§Ï†ú Ïï±ÏóêÏÑúÎäî Ïó¨Í∏∞ÏÑú ÌéòÏù¥ÏßÄ Ïù¥Îèô Î°úÏßÅ Íµ¨ÌòÑ
        },
      ),*/
    );
  }
}

class AIConsultationScreen extends StatefulWidget {
  final Map<String, dynamic> aiPersona;

  const AIConsultationScreen({
    Key? key,
    required this.aiPersona,
  }) : super(key: key);

  @override
  State<AIConsultationScreen> createState() => _AIConsultationScreenState();
}

class _AIConsultationScreenState extends State<AIConsultationScreen> {
  final TextEditingController _messageController = TextEditingController();
  final List<Map<String, dynamic>> _messages = [];

  @override
  void initState() {
    super.initState();

    // Ï¥àÍ∏∞ AI Ïù∏ÏÇ¨ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
    _addMessage(
      'ÏïàÎÖïÌïòÏÑ∏Ïöî, ÍπÄÏò®ÎèÑÎãò! ${widget.aiPersona['name']}ÏûÖÎãàÎã§. Ïò§ÎäòÏùÄ Ïñ¥Îñ§ ÎåÄÌôîÎ•º ÎÇòÎàÑÍ≥† Ïã∂ÏúºÏã†Í∞ÄÏöî?',
      'ai',
    );
  }

  void _addMessage(String text, String sender) {
    setState(() {
      _messages.add({
        'text': text,
        'sender': sender,
        'timestamp': DateTime.now(),
      });
    });
  }

  void _handleSendMessage() {
    if (_messageController.text.trim().isEmpty) return;

    final userMessage = _messageController.text;
    _addMessage(userMessage, 'user');
    _messageController.clear();

    // AI ÏùëÎãµ (Ïã§Ï†úÎ°úÎäî ÎπÑÎèôÍ∏∞Î°ú Ï≤òÎ¶¨)
    Future.delayed(const Duration(seconds: 1), () {
      String aiResponse = '';

      // Í∞ÑÎã®Ìïú AI ÏùëÎãµ ÏãúÎÆ¨Î†àÏù¥ÏÖò
      if (userMessage.contains('ÏïàÎÖï') || userMessage.contains('hi')) {
        aiResponse = 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Í∏∞Î∂ÑÏù¥ Ïñ¥Îñ†Ïã†Í∞ÄÏöî?';
      } else if (userMessage.contains('ÌôîÍ∞Ä ÎÇò') || userMessage.contains('ÏßúÏ¶ù')) {
        if (widget.aiPersona['id'] == 'empathetic') {
          aiResponse = 'ÌôîÍ∞Ä ÎÇòÏÖ®Íµ∞Ïöî. Í∑∏Îü∞ Í∞êÏ†ïÏùÑ ÎäêÎÅºÎäî Í±¥ ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏùºÏù¥ÏóêÏöî. Î¨¥Ïä® ÏùºÏù¥ ÏûàÏóàÎäîÏßÄ Îçî ÎßêÏîÄÌï¥Ï£ºÏã§ÎûòÏöî?';
        } else if (widget.aiPersona['id'] == 'analytical') {
          aiResponse = 'ÌôîÍ∞Ä ÎÇ† ÎïåÎäî Í∞êÏ†ïÏùÑ Í∞ùÍ¥ÄÏ†ÅÏúºÎ°ú Í¥ÄÏ∞∞ÌïòÎäî Í≤ÉÏù¥ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§. Ïñ¥Îñ§ ÏÉÅÌô©ÏóêÏÑú ÌôîÍ∞Ä ÎÇòÏÖ®ÎÇòÏöî?';
        } else if (widget.aiPersona['id'] == 'practical') {
          aiResponse = 'ÌôîÍ∞Ä ÎÇ¨ÏùÑ Îïå ÎèÑÏõÄÏù¥ ÎêòÎäî Î∞©Î≤ïÏùÄ Ïû†Ïãú ÍπäÍ≤å Ìò∏Ìù°ÌïòÍ≥†, ÏÉÅÌô©ÏóêÏÑú Ïû†Ïãú Î≤óÏñ¥ÎÇòÎäî Í±∞ÏòàÏöî. ÏÇ∞Ï±ÖÏùÑ ÌïòÍ±∞ÎÇò Î¨º Ìïú Ïûî ÎßàÏãúÎäî Í±¥ Ïñ¥Îñ®ÍπåÏöî?';
        } else {
          aiResponse = 'ÌôîÎÇ¨ÏùÑ ÎïåÎäî Ïïà ÏõÉÍ∏∞Îäî Ïú†Î®∏Í∞Ä Ïò§ÌûàÎ†§ Îçî ÏõÉÍ∏∏ ÎïåÍ∞Ä ÏûàÏ£†! Ïû†Ïãú Í∏çÏ†ïÏ†ÅÏù∏ Í≤ÉÏóê ÏßëÏ§ëÌï¥Î≥¥Î©¥ Ïñ¥Îñ®ÍπåÏöî? üòä';
        }
      } else if (userMessage.contains('Ï°∞Ïñ∏') || userMessage.contains('ÎèÑÏõÄ')) {
        aiResponse = 'Ïñ¥Îñ§ Ï¢ÖÎ•òÏùò Ï°∞Ïñ∏Ïù¥ ÌïÑÏöîÌïòÏã†Í∞ÄÏöî? Ï¢Ä Îçî Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÎßêÏîÄÌï¥Ï£ºÏãúÎ©¥ Îçî ÎèÑÏõÄÏù¥ Îê† Ïàò ÏûàÏùÑ Í≤É Í∞ôÏïÑÏöî.';
      } else {
        aiResponse = 'ÎßêÏîÄÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§. Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎà†Î≥ºÍπåÏöî?';
      }

      _addMessage(aiResponse, 'ai');
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDarkMode = theme.brightness == Brightness.dark;

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: isDarkMode
                ? [
              const Color(0xFF1E0338),
              const Color(0xFF1A1B3B),
              const Color(0xFF24162B),
            ]
                : [
              const Color(0xFFE8F0FD),
              const Color(0xFFF5F7FA),
              const Color(0xFFF9F0F8),
            ],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Ï±ÑÌåÖ Ìó§Îçî
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                decoration: BoxDecoration(
                  border: Border(
                    bottom: BorderSide(
                      color: Colors.white.withOpacity(0.1),
                      width: 0.5,
                    ),
                  ),
                ),
                child: Row(
                  children: [
                    InkWell(
                      onTap: () {
                        Navigator.of(context).pop();
                      },
                      child: Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.white.withOpacity(0.1),
                        ),
                        child: const Icon(
                          Icons.arrow_back,
                          color: Colors.white,
                          size: 18,
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),

                    Container(
                      width: 42,
                      height: 42,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        gradient: LinearGradient(
                          colors: widget.aiPersona['gradient'],
                        ),
                      ),
                      child: Center(
                        child: Text(
                          widget.aiPersona['avatar'],
                          style: const TextStyle(fontSize: 22),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),

                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Text(
                              widget.aiPersona['name'],
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(width: 8),
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(12),
                                color: Colors.white.withOpacity(0.1),
                              ),
                              child: Text(
                                '"ÏÉÅÎã¥Ïù¥"',
                                style: TextStyle(
                                  color: Colors.grey[400],
                                  fontSize: 12,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Text(
                          widget.aiPersona['persona'],
                          style: TextStyle(
                            color: Colors.grey[400],
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),

                    const Spacer(),

                    InkWell(
                      onTap: () {
                        // ÏÑ§Ï†ï Î©îÎâ¥ Ïó¥Í∏∞
                      },
                      child: Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.white.withOpacity(0.1),
                        ),
                        child: const Icon(
                          Icons.more_vert,
                          color: Colors.white,
                          size: 18,
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              // Î©îÏãúÏßÄ ÏòÅÏó≠
              Expanded(
                child: ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: _messages.length,
                  itemBuilder: (context, index) {
                    final message = _messages[index];
                    final isUser = message['sender'] == 'user';

                    return Padding(
                      padding: const EdgeInsets.only(bottom: 16),
                      child: Row(
                        mainAxisAlignment: isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          if (!isUser) ...[
                            Container(
                              width: 32,
                              height: 32,
                              decoration: BoxDecoration(
                                shape: BoxShape.circle,
                                gradient: LinearGradient(
                                  colors: widget.aiPersona['gradient'],
                                ),
                              ),
                              child: Center(
                                child: Text(
                                  widget.aiPersona['avatar'],
                                  style: const TextStyle(fontSize: 16),
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                          ],

                          Container(
                            constraints: BoxConstraints(
                              maxWidth: MediaQuery.of(context).size.width * 0.75,
                            ),
                            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                            decoration: BoxDecoration(
                              color: isUser
                                  ? const Color(0xFFFF3B5C).withOpacity(0.2)
                                  : Colors.white.withOpacity(0.05),
                              borderRadius: BorderRadius.circular(20).copyWith(
                                bottomLeft: isUser ? null : const Radius.circular(0),
                                bottomRight: isUser ? const Radius.circular(0) : null,
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  message['text'],
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 15,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  _formatTime(message['timestamp']),
                                  style: TextStyle(
                                    color: Colors.grey[500],
                                    fontSize: 10,
                                  ),
                                  textAlign: TextAlign.right,
                                ),
                              ],
                            ),
                          ),

                          if (isUser) ...[
                            const SizedBox(width: 8),
                            Container(
                              width: 32,
                              height: 32,
                              decoration: const BoxDecoration(
                                shape: BoxShape.circle,
                                gradient: LinearGradient(
                                  colors: [Color(0xFFFF3B5C), Color(0xFFB9375E)],
                                ),
                              ),
                              child: const Center(
                                child: Text(
                                  'ÎÇò',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ],
                      ),
                    );
                  },
                ),
              ),

              // ÏûÖÎ†• ÏòÅÏó≠
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                decoration: BoxDecoration(
                  border: Border(
                    top: BorderSide(
                      color: Colors.white.withOpacity(0.1),
                      width: 0.5,
                    ),
                  ),
                ),
                child: Row(
                  children: [
                    Container(
                      width: 40,
                      height: 40,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.white.withOpacity(0.1),
                      ),
                      child: const Icon(
                        Icons.sentiment_satisfied_alt_outlined,
                        color: Colors.grey,
                      ),
                    ),
                    const SizedBox(width: 12),

                    Expanded(
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(30),
                          color: Colors.white.withOpacity(0.1),
                        ),
                        child: TextField(
                          controller: _messageController,
                          decoration: const InputDecoration(
                            hintText: 'Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...',
                            hintStyle: TextStyle(color: Colors.grey),
                            border: InputBorder.none,
                          ),
                          style: const TextStyle(color: Colors.white),
                          onSubmitted: (_) => _handleSendMessage(),
                        ),
                      ),
                    ),

                    const SizedBox(width: 12),

                    Container(
                      width: 40,
                      height: 40,
                      decoration: const BoxDecoration(
                        shape: BoxShape.circle,
                        gradient: LinearGradient(
                          colors: [Color(0xFFFF3B5C), Color(0xFFB9375E)],
                        ),
                      ),
                      child: IconButton(
                        icon: const Icon(
                          Icons.send,
                          color: Colors.white,
                          size: 18,
                        ),
                        onPressed: _handleSendMessage,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _formatTime(DateTime time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }
}